version: 2.1
executors:
  default:
    docker:
      - image: circleci/ruby:2.6.6-buster-node
        environment:
          RAILS_ENV: test
          BUNDLE_PATH: vendor/bundle
          BUNDLE_JOBS: 4
          DATABASE_URL: mysql2://root@127.0.0.1/myapp_test?reconnect=true&encoding=utf8mb4&charset=utf8mb4&collation=utf8mb4_general_ci&pool=5
      - image: circleci/mysql:5.7
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: "true"
  gcloud:
    docker:
      - image: google/cloud-sdk:312.0.0-alpine
  cimg:
    docker:
      - image: cimg/base:2021.03

jobs:
  build:
    executor: default
    resource_class: small
    steps:
      - checkout
      - restore_cache:
          paths:
            - vendor/bundle
          keys:
            - gems-202006211954-{{ checksum "Gemfile.lock" }}
            - gems-202006211954-
            - gems-
      - run:
          name: bundle install
          command: |
            bundle install
      - save_cache:
          paths:
            - vendor/bundle
          key: gems-202006211954-{{ checksum "Gemfile.lock" }}
      - run:
          name: DB を待機
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - run:
          name: データベースをセットアップ
          command: bundle exec rails db:create db:schema:load --trace
      - run:
          name: ruby syntax check
          command: |
            bundle exec rails runner 'Rails.application.eager_load!; puts "Syntax OK. Ruby: " + RUBY_VERSION + ", Rails: " + Rails::VERSION::STRING'
      - run:
          name: RSpec を並列実行
          command: |
            bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out test_results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
      - store_test_results:
          path: test_results

  deploy:
    executor: cimg
    resource_class: small
    steps:
      - checkout
      - run:
          name: Install Heroku CLI
          command: curl https://cli-assets.heroku.com/install.sh | sh
      - run:
          name: heroku maintenance on
          command: heroku maintenance:on --app ${HEROKU_APP_NAME}
      - run:
          name: Deploy to Heroku_Production
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master
      - run:
          name: heroku maintenance off
          command: heroku maintenance:off --app ${HEROKU_APP_NAME}

  push:
    executor: gcloud
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: docker build
          command: |
            docker build . \
              -t ${GOOGLE_GCR_URL}/${GOOGLE_PROJECT_ID}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}
      - run:
          name: gcloud config
          command: |
            echo ${GCLOUD_SERVICE_KEY} | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}-a
            gcloud auth configure-docker --quiet --project ${GOOGLE_PROJECT_ID}
      - run:
          name: docker push
          command: |
            docker push ${GOOGLE_GCR_URL}/${GOOGLE_PROJECT_ID}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}

workflows:
  build-deploy:
    jobs:
      - build
      - push:
          requires:
            - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - master
